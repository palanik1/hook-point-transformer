<source file="xdp_prog_kern.c" startline="33" endline="35">
static __always_inline void swap_src_dst_mac (struct ethhdr *eth) {
}
</source>
<source file="xdp_prog_kern.c" startline="37" endline="39">
static __always_inline void swap_src_dst_ipv6 (struct ipv6hdr *ipv6) {
}
</source>
<source file="xdp_prog_kern.c" startline="41" endline="43">
static __always_inline void swap_src_dst_ipv4 (struct iphdr *iphdr) {
}
</source>
<source file="xdp_prog_kern.c" startline="45" endline="92">
SEC ("xdp_icmp_echo")
int xdp_icmp_echo_func (struct __sk_buff *ctx) {
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct hdr_cursor nh;
    struct ethhdr *eth;
    int eth_type;
    int ip_type;
    int icmp_type;
    struct iphdr *iphdr;
    struct ipv6hdr *ipv6hdr;
    __u16 echo_reply;
    struct icmphdr_common *icmphdr;
    __u32 action = TC_ACT_OK;
    nh.pos = data;
    eth_type = parse_ethhdr (&nh, data_end, &eth);
    if (eth_type == bpf_htons (ETH_P_IP)) {
        ip_type = parse_iphdr (&nh, data_end, &iphdr);
        if (ip_type != IPPROTO_ICMP)
            goto out;
    }
    else if (eth_type == bpf_htons (ETH_P_IPV6)) {
        ip_type = parse_ip6hdr (&nh, data_end, &ipv6hdr);
        if (ip_type != IPPROTO_ICMPV6)
            goto out;
    }
    else {
        goto out;
    }
    icmp_type = parse_icmphdr_common (&nh, data_end, &icmphdr);
    if (eth_type == bpf_htons (ETH_P_IP) && icmp_type == ICMP_ECHO) {
        swap_src_dst_ipv4 (iphdr);
        echo_reply = ICMP_ECHOREPLY;
    }
    else if (eth_type == bpf_htons (ETH_P_IPV6) && icmp_type == ICMPV6_ECHO_REQUEST) {
        swap_src_dst_ipv6 (ipv6hdr);
        echo_reply = ICMPV6_ECHO_REPLY;
    }
    else {
        goto out;
    }
    swap_src_dst_mac (eth);
    action = XDP_TX;
out :
    return xdp_stats_record_action (ctx, action);
}
</source>
<source file="xdp_prog_kern.c" startline="94" endline="110">
SEC ("xdp_redirect")
int xdp_redirect_func (struct __sk_buff *ctx) {
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct hdr_cursor nh;
    struct ethhdr *eth;
    int eth_type;
    int action = TC_ACT_OK;
    nh.pos = data;
    eth_type = parse_ethhdr (&nh, data_end, &eth);
    if (eth_type == -1)
        goto out;
out :
    return xdp_stats_record_action (ctx, action);
}
</source>
<source file="xdp_prog_kern.c" startline="112" endline="134">
SEC ("xdp_redirect_map")
int xdp_redirect_map_func (struct __sk_buff *ctx) {
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct hdr_cursor nh;
    struct ethhdr *eth;
    int eth_type;
    int action = TC_ACT_OK;
    unsigned char *dst;
    nh.pos = data;
    eth_type = parse_ethhdr (&nh, data_end, &eth);
    if (eth_type == -1)
        goto out;
    dst = bpf_map_lookup_elem (&redirect_params, eth->h_source);
    if (!dst)
        goto out;
    memcpy (eth -> h_dest, dst, ETH_ALEN);
    action = bpf_redirect_map (&tx_port, 0, 0);
out :
    return xdp_stats_record_action (ctx, action);
}
</source>
<source file="xdp_prog_kern.c" startline="136" endline="139">
static __always_inline int ip_decrease_ttl (struct iphdr *iph) {
    return --iph->ttl;
}
</source>
<source file="xdp_prog_kern.c" startline="141" endline="206">
SEC ("xdp_router")
int xdp_router_func (struct __sk_buff *ctx) {
    void *data_end = (void *) (long) ctx->data_end;
    void *data = (void *) (long) ctx->data;
    struct bpf_fib_lookup fib_params = {};
    struct ethhdr *eth = data;
    struct ipv6hdr *ip6h;
    struct iphdr *iph;
    __u16 h_proto;
    __u64 nh_off;
    int rc;
    int action = TC_ACT_OK;
    nh_off = sizeof (*eth);
    if (data + nh_off > data_end) {
        action = TC_ACT_SHOT;
        goto out;
    }
    h_proto = ctx->protocol;
    if (h_proto == bpf_htons (ETH_P_IP)) {
        iph = data + nh_off;
        if (iph + 1 > data_end) {
            action = TC_ACT_SHOT;
            goto out;
        }
        if (iph->ttl <= 1)
            goto out;
    }
    else if (h_proto == bpf_htons (ETH_P_IPV6)) {
        ip6h = data + nh_off;
        if (ip6h + 1 > data_end) {
            action = TC_ACT_SHOT;
            goto out;
        }
        if (ip6h->hop_limit <= 1)
            goto out;
    }
    else {
        goto out;
    }
    fib_params.ifindex = ctx->ingress_ifindex;
    rc = bpf_fib_lookup (ctx, &fib_params, sizeof (fib_params), 0);
    switch (rc) {
    case BPF_FIB_LKUP_RET_SUCCESS :
        if (h_proto == bpf_htons (ETH_P_IP))
            ip_decrease_ttl (iph);
        else if (h_proto == bpf_htons (ETH_P_IPV6))
            ip6h->hop_limit--;
        break;
    case BPF_FIB_LKUP_RET_BLACKHOLE :
    case BPF_FIB_LKUP_RET_UNREACHABLE :
    case BPF_FIB_LKUP_RET_PROHIBIT :
        action = TC_ACT_SHOT;
        break;
    case BPF_FIB_LKUP_RET_NOT_FWDED :
    case BPF_FIB_LKUP_RET_FWD_DISABLED :
    case BPF_FIB_LKUP_RET_UNSUPP_LWT :
    case BPF_FIB_LKUP_RET_NO_NEIGH :
    case BPF_FIB_LKUP_RET_FRAG_NEEDED :
        break;
    }
out :
    return xdp_stats_record_action (ctx, action);
}
</source>
<source file="xdp_prog_kern.c" startline="208" endline="213">
SEC ("xdp_pass")
int xdp_pass_func (struct __sk_buff *ctx) {
    return TC_ACT_OK;
}
</source>
